@startuml
title DFN 


package FractureLibrary <<Folder>>
{


struct FractureStruct{
+ NumeroFratture : unsigned int
+ IdFratture : vector<unsigned int>
+ NumeroVertici : vector<unsigned int>
+ CoordinateVertici : vector<MatrixXd>
+ NumeroTracceN : vector<list<unsigned int>>
+ NumeroTracceP : vector<list<unsigned int>>
+ NormaleFrattura : vector<Vector3d> 
}


struct TracesStruct{
+ ct : unsigned int
+ IdTracce : vector<unsigned int>
+ EstremiTracce : vector<Matrix<double,2,3>>
+ LunghezzaTracce : vector<double>
+ PNP : vector<Matrix<unsigned int,2,2>> 
}


struct PolygonalMesh{
+ NumberCell0D : unsigned int
+ Cell0DId : vector<unsigned int>
+ Cell0DCoordinates : vector<Vector3d>
+ NumberCell1D : unsigned int
+ Cell1DId : vector<unsigned int>
+ Cell1DVertices : vector<Vector2i>
+ NumberCell2D : unsigned int
+ NumeroDiVertici : vector<unsigned int>
+ NumeroDiLati : vector<unsigned int>
+ Cell2DVertices : vector<VectorXi>
+ Cell2DEdges : vector<VectorXi>
}





package Main <<Folder>>{
}

Funzione_Input <--up- Main : chiama 
Parte2   <-up-- Main : chiama ricorsivamente <
Main --down--> CheckIntersezione : chiama 



abstract Parte2{
+ subPolygons(verticiPolygons,  coordEstremiTracce,  sp, normale, tol): bool
}
Parte2 - PolygonalMesh : costruisce >


abstract Funzione_Input{
+ ImportData(fileName, fract) : bool
}
FractureStruct <--up- Funzione_Input : costruisce <


abstract CheckIntersezione{
+ checkIntersezione(fract, trac, n1, n2, tol) : bool
+ FracturePlane(fract, n) : Vector4d 
+ parallelPlanes(plane1, plane2, tol) : bool 
}
CheckIntersezione -> CalcoloTraccia : esegue 
CheckIntersezione <-down--> BoundingBox : esegue controllo
CheckIntersezione - FractureStruct : per ogni frattura

abstract CalcoloTraccia{
+ IntersectionLine(plane1, plane2) : Matrix<double,2,3> 
+ CheckTraccia(fract,trac,intersectionLine,n1,n2,tol) : bool 
+ descendingOrder(trac, list, num, tol) : void 
}
CalcoloTraccia -down--> TracesStruct : salva traccia in >
CalcoloTraccia -up--> FractureStruct : aggiorna >
CalcoloTraccia <-down--> BoundingBox

abstract BoundingBox{
+ BBoxIntersection(fract,n1, n2,tol) : bool
+ ComputeBoundingBox(fract, n, tol) : Matrix<double,2,3>
}

abstract Funzioni_Output{
+ GeneralOutput(trac, frac) : bool
+ OutputFractures(trac,frac) : bool
+ OutputTraces(trac) : bool
}
Main -up--> Funzioni_Output
Funzioni_Output <- TracesStruct
Funzioni_Output <- FractureStruct


}






package Gedim <<Frame>>
{

}
@enduml