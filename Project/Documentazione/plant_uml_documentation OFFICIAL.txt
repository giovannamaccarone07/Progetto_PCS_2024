@startuml
title DFN 


package FractureLibrary <<Folder>>
{


struct FractureStruct{
' Visibility NameVaribale : Type
+ NumeroFratture : unsigned int
+ IdFratture : std::vector<unsigned int>
+ NumeroVertici : std::vector<unsigned int>
+ IndiciVertici : std::vector<std::vector<unsigned int>>
+ CoordinateVertici : std::vector<Eigen::MatrixXd>
+ NumeroTracceN : std::vector<std::list<unsigned int>>
+ NumeroTracceP : std::vector<std::list<unsigned int>>


+ Polygon(VerticesCoordinates, listVertices)
+ void GedimInterface(vector<vector<unsigned int>>& triangles,
                        \t \t \t  \t \t VectorXi& materials)
+ vector<double> computePolygonsArea()
+ vector<vector<vector<unsigned int>>> TriangulatePolygons()
.. Non member function ..
bool ImportaDati(const string& NomeFile, FractureStruct& Fract)

.. TESTPOLYGON ..
TestComputePolygonsArea
TestGedimInterface
}


struct TracesStruct{
+ ct : unsigned int
+ IdTracce : std::vector<unsigned int>
+ EstremiTracce : std::vector<Eigen::Matrix<double,2,3>>
+ LunghezzaTracce : std::vector<double>
.. TESTTRIANGLE ..
TestComputeArea
}


struct PolygonalMesh{
+ NumberCell0D : unsigned int
+ Cell0DId : std::vector<unsigned int>
+ Cell0DCoordinates : std::vector<Eigen::Vector3d>
+ NumberCell1D : unsigned int
+ Cell1DId : std::vector<unsigned int>
+ Cell1DVertices : std::vector<Eigen::Vector2i>
+ NumberCell2D : unsigned int
+ NumeroDiVertici : std::vector<unsigned int>
+ NumeroDiLati : std::vector<unsigned int>
+ Cell2DVertices : std::vector<Eigen::VectorXi>
+ Cell2DEdges : std::vector<Eigen::VectorXi>
}

package Utils <<Folder>>{
abstract Funzioni {
+ bool ImportaDati(const string& NomeFile, FractureStruct& Fract)
+ Eigen::Matrix<double,2,3> RettaIntersezione(Vector4d& piano1, Vector4d& piano2)
+ Eigen::Vector4d PianoPassantePerFrattura(const FractureStruct& fract, const unsigned int& n)
+ bool CheckTraccia(FractureStruct& fract, TracesStruct& trac, const MatrixXd& rettaIntersezione, const unsigned int& n1, const unsigned int& n2, const double& tol)
+ bool checkIntersezione( FractureStruct& fract, TracesStruct& trac, const unsigned int& n1, const  unsigned int& n2, const double& tol)
+ bool IntersezioneBoundingBox(const FractureStruct& fract, const unsigned int& n1, const unsigned int& n2)
+ bool ComputeTrace(TracesStruct& trac, FractureStruct& fract, double ts1, double ts2, const MatrixXd& rettaIntersezione, const unsigned int& n1, const unsigned int& n2, bool pass1,bool pass2)
+ Eigen::Matrix<double,2,3> ComputeBoundingBox(const FractureStruct& fract, unsigned int n)
+ bool Output(const TracesStruct& trac, const FractureStruct& frac)
+ bool pianiParalleli(Vector4d& piano1, Vector4d& piano2, const double& tol)
+ bool OutputFractures(const TracesStruct& trac, const FractureStruct& frac)
+ bool OutputTraces(const TracesStruct& trac)
+ void ordineDecrescente(TracesStruct& trac, list<unsigned int>& lista, const unsigned int& num)
}



}
' Modeling relationship: https://blog.visual-paradigm.com/what-are-the-six-types-of-relationships-in-uml-class-diagrams/#:~:text=There%20are%20six%20main%20types,aggregation%20%2C%20association%2C%20and%20dependency%20.

' Left, right, up, down to try to orient classes in the space based on their relationship

' Aggregazione
Polygon "1" o-left- "many" Triangle : is made up of

}


package Gedim <<Frame>>
{

}


' PlotPolygon relies upon Gedim
Polygon::GedimInterface --right--> Gedim

' Add notes and link it with an object thourgh the sumbol ..
note "This is an external package" as GedimNote
GedimNote .. Gedim
@enduml